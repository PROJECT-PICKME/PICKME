<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.pickme.user.repository.UserMapper">
    <insert id="save" parameterType="project.pickme.user.domain.User">
        insert into User(id, password, role, name, email, type, addr, phone_num, business_num, point)
        values(#{id}, #{password}, #{role}, #{name}, #{email}, #{type}, #{addr}, #{phoneNum}, #{businessNum}, #{point})
    </insert>

    <select id="findUserById" parameterType="String" resultType="project.pickme.user.domain.User">
        select id,
               password,
               role,
               name,
               email,
               type,
               addr,
               phone_num    as phoneNum,
               business_num as businessNum,
               point
        from User
        where id = #{id}
    </select>

    <delete id="deleteAll">
        delete from User
    </delete>

    <update id="minusPoint">
        update User
        set point = point - #{price}
        where id = #{userId}
    </update>

    <update id="updatePointById" parameterType="project.pickme.user.dto.UserDto$UpdatePoint">
        update User
        set point = #{point}
        where id = #{id}
    </update>

    <update id="updatePassword">
        update User
        set password = #{password}
        where id = #{userId}
    </update>

    <update id="updateMyInfo">
        update User
        set name = #{updateInfoDto.name},
            email = #{updateInfoDto.email},
            phone_num = #{updateInfoDto.phoneNum},
            addr = #{updateInfoDto.addr},
            business_num = #{updateInfoDto.businessNum}
        where id = #{userId}
    </update>

    <select id="findPointHistory" parameterType="String" resultType="project.pickme.user.dto.PointHistoryDto">
        select time,
               price,
               type,
               sum(case when type = 1 then price else -price end)
                   over (order by time, type desc rows between unbounded preceding and current row ) as currentPoint
        from (select p.payment_time as time, price, 0 as type
              from Payment p
                       left join Bid b
                                 on p.bid_id = b.bid_id and b.is_success = 1
              where p.user_id = #{userId}

              union

              select charge_time as time, price, 1 as type
              from Charge
              where user_id = #{userId}) as history
        order by time, type desc
    </select>
</mapper>
